#!/bin/sh
# Initial script for Linux Live Kit
# Author: Tomas M <http://www.linux-live.org/>

export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin

. /lib/config
. /lib/livekitlib

transfer_initramfs

MEMORY=/m
CHANGES=$MEMORY/changes
UNION=$MEMORY/union
DATAMNT=$MEMORY/data
BUNDLES=$MEMORY/b


header "Live Kit init <http://www.linux-live.org/>"

init_proc_sysfs

debug_start
debug_shell
# load some modules manually first, then modprobe everything we have
# modprobe all devices excluding network drivers
modprobe_everything -v /drivers/net/

init_devs
init_aufs
init_zram

# initialize blkid cache file
init_blkid_cache

# find data dir with filesystem bundles
DATA="$(find_data 45 "$DATAMNT")"
check_data_found "$DATA"
debug_shell
# setup persistent changes, if possible
persistent_changes "$DATA" "$CHANGES"
debug_shell
# copy to RAM if needed
DATA="$(copy_to_ram "$DATA" "$CHANGES")"

# mount bundles
mount_bundles "$DATA" "$BUNDLES"
debug_shell

if [ ! -z "$modpath" ]; then
	if [ -d "$DATAMNT"/"$modpath" ]; then
		mount_bundles_modpath "$DATAMNT"/"$modpath" "$BUNDLES"
	fi
fi
debug_shell

# init aufs union, or setup overlayfs union
init_union "$CHANGES" "$UNION" "$BUNDLES"

# add data to aufs union
union_append_bundles "$BUNDLES" "$UNION"

debug_shell
if [ ! -z "$hostname" ]; then
# Configure hostname and network:
#echo "${hostname}.example.net" > ${UNION}/etc/HOSTNAME
echo "${hostname}" > ${UNION}/etc/hostname
if [ -f ${UNION}/etc/NetworkManager/NetworkManager.conf ]; then
  sed -i ${UNION}/etc/NetworkManager/NetworkManager.conf -e "s/^hostname=.*/hostname=${hostname}/"
fi
echo "127.0.0.1 localhost" > ${UNION}/etc/hosts
echo "::1 localhost ip6-localhost ip6-loopback" >> ${UNION}/etc/hosts
echo "ff02::1 ip6-allnodes" >> ${UNION}/etc/hosts
echo "ff02::2 ipt-allrouters" >> ${UNION}/etc/hosts
echo "127.0.0.1 ${hostname}.example.net ${hostname}" >> ${UNION}/etc/hosts
fi

#mount bind a $DATAMNT/$home folder to make it easier to update
#ex home=folder then the folder mount bind $DATAMNT/folder
#only mount 
if [ ! -z "$home" -a -z "$homedat"]; then
	[ -d $DATAMNT/$home ] || mkdir -p $DATAMNT/$home
	if [ -d $DATAMNT/$home ]; then
		mount -o bind $DATAMNT/$home $UNION/home
	fi
fi

if [ ! -z "$home" -a ! -z "$homedat" ]; then
	if [ -z "$homedatsize" ]; then
		homedatsize="16000"
	fi

	if [ -e "$DATAMNT/$home/$home.dat.0" ]; then
		echo "* Restoring persistent changes"
		EXISTS="true"
	else
		echo "* Creating new persistent changes"
		EXISTS=""
    fi
    [ -d $DATAMNT/$home ] || mkdir -p $DATAMNT/$home
	@mount.dynfilefs -f "$DATAMNT/$home/$home.dat" -s "$homedatsize" -m "$UNION/home" -p 4000
	if [ ! "$EXISTS" ]; then
		mke2fs -F "$UNION/home/virtual.dat" >/dev/null 2>&1
	fi
	mount -o loop,sync "$UNION/home/virtual.dat" "$UNION/home"
fi

debug_shell

#setup user and password
if [ ! -z "$user" ]; then
	if [ ! -d $UNION/home/$user ]; then
		[ -d $UNION/home ] || mkdir -p $UNION/home
		echo "Setting up $user"
		#chroot $UNION /usr/sbin/useradd -m -g users -s /bin/bash $user
		#chroot $UNION /usr/sbin/usermod -G wheel,audio,cdrom,floppy,plugdev,video,power,netdev,lp,scanner,kmem $user
		chroot $UNION useradd -m -g users -s /bin/bash $user
		chroot $UNION useradd -m -g users -s /bin/bash $user
		chroot $UNION usermod -G audio,cdrom,floppy,plugdev,video,netdev,lp,kmem,sudo $user
		#if this is added with kali linux it would fail the all groups so best to do it by itself
		chroot $UNION usermod -a -G scanner $user
		debug_shell
		echo "Setting up /home/$user folder"
		chroot $UNION mkhomedir_helper $user
		echo "Setting up $user password"
		echo "$user:$user" > $UNION/tmp/chpasswd.tmp
		#chroot $UNION /usr/sbin/chpasswd < $UNION/tmp/chpasswd.tmp
		chroot $UNION chpasswd < $UNION/tmp/chpasswd.tmp
		debug_shell
		
		rm -f $UNION/tmp/chpasswd.tmp
		# Configure suauth:
		#echo "Configure suauth"
		#echo "root:${user}:OWNPASS" > ${UNION}/etc/suauth
		#echo "root:ALL EXCEPT GROUP users:DENY" >> ${UNION}/etc/suauth
		#chmod 600 ${UNION}/etc/suauth

		# Configure sudoers:
		#echo "Configure sudoers"
		#chmod 640 ${UNION}/etc/sudoers
		#sed -i ${UNION}/etc/sudoers -e 's/# *\(%users\sALL=(ALL)\sALL\)/\1/'
		#chmod 440 ${UNION}/etc/sudoers
	else
		echo "/home/$user folder exists."
	fi
fi
debug_shell

#copy the password files to $DATA/rootcopy if $home is used
if [ ! -z "$home" -a  ! -z "$user" ! -z "$homedat" -a "$(cat /proc/cmdline | grep perch)" == "" ]; then
	for file in group gshadow passwd shadow subgid subuid; do
		[ -d /tmp1/etc ] || mkdir -p /tmp1/etc
		if [ -f "$CHANGES/.rootfs/etc/$file" ]; then
				file1="$CHANGES/.rootfs/etc/$file"
		elif [ -f "$CHANGES/etc/$file" ]; then
				file1="$CHANGES/etc/$file"
		fi
		if [ -f "${file1}" ]; then
			echo "${file1}"
			cp -a "${file1}" /tmp1/etc/$file
		fi
	done
	date="$(date +%Y%m%d-%H%M%S)"
	modulepsw="$DATA/modules/${date}-100-${user}-password.sb"
	if [ "$(find $DATA/modules -name "*-100-${user}-password.sb" -type f)" == "" ]; then
		echo "Making $modulepsw"
		mksquashfs /tmp1 $modulepsw 2>/dev/null >>/var/log/livedbg
	fi
	modulehome="$DATA/modules/${date}-100-${user}-home.sb"
	if [ "$(find $DATA/modules -name "*-100-${user}-home.sb" -type f)" == "" ]; then
		echo "Making $modulehome"
		mksquashfs $UNION/home $modulehome -keep-as-directory  2>/dev/null >>/var/log/livedbg
	fi
fi
debug_shell

if [ ! -z "$autologin" ]; then
	echo "setting up lightdm autologin of user $user"
	if [ -d $UNION/etc/lightdm/lightdm.conf.d ]; then
		echo "[Seat:*]" > $UNION/etc/lightdm/lightdm.conf.d/01_${user}.conf
		echo "autologin-user=$user" >> $UNION/etc/lightdm/lightdm.conf.d/01_${user}.conf
		echo "autologin-user-timeout=0" >> $UNION/etc/lightdm/lightdm.conf.d/01_${user}.conf
	fi
fi
debug_shell
#timezone
if [ ! -z "$timezone" ]; then
	if [ -f $UNION/usr/share/zoneinfo/$timezone ]; then
		echo "Timezone $timezone"
		ln -sf /usr/share/zoneinfo/$timezone $UNION/etc/localtime
	fi
fi
debug_shell

if [ ! -z "$locale" ]; then
	echo "Locale ${locale}.UTF-8"
	sed -i 's|^LC_ALL=.*||g' $UNION/etc/environment
	echo "LC_ALL=${locale}.UTF-8" | tee -a $UNION/etc/environment
	echo "${locale}.UTF-8 UTF-8" | tee $UNION/etc/locale.gen
	echo "LANG=${locale}.UTF-8" | tee $UNION/etc/locale.conf
	echo "chroot $UNION locale-gen ${locale}.UTF-8"
	chroot $UNION locale-gen ${locale}.UTF-8
fi
debug_shell
if [ ! -z "$keyboard" ]; then
	echo "setting keyboard to $keyboard"
	chroot $UNION localectl set-keymap "$keyboard"
fi

debug_shell
# rootcopy
if [ -z "$norootcopy" ]; then
	copy_rootcopy_content "$DATA" "$UNION"
fi
debug_shell
# create fstab
fstab_create "$UNION" "$DATAMNT"
debug_shell
header "Live Kit done, starting $LIVEKITNAME"
change_root "$UNION"

header "!!ERROR occured, you shouldn't be here.!!"
/bin/sh
